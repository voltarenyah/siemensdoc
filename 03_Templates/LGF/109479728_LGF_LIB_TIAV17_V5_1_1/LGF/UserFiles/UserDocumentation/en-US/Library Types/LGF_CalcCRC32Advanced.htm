<!DOCTYPE html><html lang='en-US'>
<head>
<script src='../../../Code2Docu/katex/katex.min.js'></script>
<script src='../../../Code2Docu/katex/katexStartUp.js'></script>
<link rel='stylesheet' href='../../../Code2Docu/katex/katex.min.css' />
<!--[if lt IE 9]><script src='../../../Code2Docu/katex/html5shiv-printshiv-3.7.3.min.js'></script><![endif]-->
<link rel='stylesheet' href='../../../Code2Docu/highlightJS/scl.css'>
<script src='../../../Code2Docu/highlightJS/highlight.pack.js'></script>
<script src='../../../Code2Docu/highlightJS/scl.js'></script>
<script src='../../../Code2Docu/Code2DocuScript.js'></script>
<script type='text/javascript'>
hljs.registerLanguage('scl', window.hljsDefineSCL);
hljs.initHighlightingOnLoad();
</script>
<link rel='stylesheet' href='../../../Code2Docu/style.css'>
<link rel='stylesheet' href='../../../Code2Docu/styleCustomized.css'>
<meta http-equiv='Content-type' content='text/html;charset=UTF-8'>
<title>LGF_CalcCRC32Advanced (FC / V3.1.0)</title>
</head>
<body>
 <div class="containerFluid"> 
 <h1>LGF_CalcCRC32Advanced (FC / V3.1.0)</h1>
<div class='langSelectionBox'>
<a href='..\..\en-US\Folders\LGF.htm' target='_self'>Overview</a> 
<select class='langSelector' id='langSelector' onChange=changeLang('en-US')>
<option class='langOption' value=en-US selected>English (United States)</option>
<option class='langOption' value=de-DE>German (Germany)</option>
</select></div></div><hr>
<span class='author'>Author: Siemens Industry Support</span>
<h2>Short description</h2>
<p>The CRC calculation is used for error detection at data transmission. The result of a calculation returns a CRC value via the data sent. The receiver detects a faulty transmission due to the unequal CRC value. The function <code>LGF_CalcCRC32Advanced</code> uses 32 bits as the generator polynomial (mask) and the parameters <code>finalXorValue</code>, <code>reflectInput</code>, and <code>reflectResult</code>.</p>

<h3>Block Interface</h3>
<table class='block'><thead><tr><th colspan='2'> </th><th colspan='5'>LGF_CalcCRC32Advanced (FC)</th><th colspan='2'> </th></tr></thead><tbody>
<tr class='in return'><td rowspan='2'>DWord</td><td>&nbsp;</td><td>&nbsp;</td><td rowspan='2'>initValue</td><td rowspan='2'>&nbsp;</td><td rowspan='2'>Ret_Val</td><td>&nbsp;</td><td>&nbsp;</td><td rowspan='2'>DWord</td></tr>
<tr class='in return interface'><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr class='in out'><td rowspan='2'>DWord</td><td>&nbsp;</td><td>&nbsp;</td><td rowspan='2'>mask</td><td rowspan='2'>&nbsp;</td><td rowspan='2'>error</td><td>&nbsp;</td><td>&nbsp;</td><td rowspan='2'>Bool</td></tr>
<tr class='in out interface'><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr class='in out'><td rowspan='2'>DWord</td><td>&nbsp;</td><td>&nbsp;</td><td rowspan='2'>finalXorValue</td><td rowspan='2'>&nbsp;</td><td rowspan='2'>status</td><td>&nbsp;</td><td>&nbsp;</td><td rowspan='2'>Word</td></tr>
<tr class='in out interface'><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr class='in'><td rowspan='2'>Bool</td><td>&nbsp;</td><td>&nbsp;</td><td rowspan='2'>reflectInput</td><td rowspan='2'>&nbsp;</td><td rowspan='2'></td><td>&nbsp;</td><td>&nbsp;</td><td rowspan='2'></td></tr>
<tr class='in interface'><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr class='in'><td rowspan='2'>Bool</td><td>&nbsp;</td><td>&nbsp;</td><td rowspan='2'>reflectResult</td><td rowspan='2'>&nbsp;</td><td rowspan='2'></td><td>&nbsp;</td><td>&nbsp;</td><td rowspan='2'></td></tr>
<tr class='in interface'><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr class='in'><td rowspan='2'>UInt</td><td>&nbsp;</td><td>&nbsp;</td><td rowspan='2'>noOfElements</td><td rowspan='2'>&nbsp;</td><td rowspan='2'></td><td>&nbsp;</td><td>&nbsp;</td><td rowspan='2'></td></tr>
<tr class='in interface'><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr class='inOut'><td rowspan='2'>Array[*] of Byte</td><td>&nbsp;</td><td>&nbsp;</td><td colspan='3'>array</td><td>&nbsp;</td><td>&nbsp;</td><td rowspan='2'>Array[*] of Byte</td></tr>
<tr class='inOut interface'><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
</tbody><tfoot><tr><td colspan='2'>&nbsp;</td><td colspan='5'>&nbsp;</td><td colspan='2'>&nbsp;</td></tr></tfoot></table>
<h3>Input parameter</h3>
<table class='BlockInterface'><thead><tr><th class='name'>Identifier</th><th class='type'>Data type</th>
<th>Description</th></tr></thead><tbody>
<tr><td>initValue</td><td>DWord</td>
<td>Start value with which the calculation is executed.<br>If there is no need for start value - assign 16#00</td></tr>
<tr><td>mask</td><td>DWord</td>
<td>Generator polynomial with which the calculation is executed.<br>(Mask / CRC polynomial)</td></tr>
<tr><td>finalXorValue</td><td>DWord</td>
<td>Value with which another XOR operation is performed at the end</td></tr>
<tr><td>reflectInput</td><td>Bool</td>
<td>TRUE: the sequence of the bits within the input byte is mirrored. The sequence 0...7 becomes 7...0.</td></tr>
<tr><td>reflectResult</td><td>Bool</td>
<td>TRUE: the order of the bits within the result is mirrored. The sequence 0...7 becomes 7...0.</td></tr>
<tr><td>noOfElements</td><td>UInt</td>
<td>Number of elements to be used in CRC calculation<br>0 = all elements / the whole array</td></tr>
</tbody></table>
<h3>Output parameter</h3>
<table class='BlockInterface'><thead><tr><th class='name'>Identifier</th><th class='type'>Data type</th>
<th>Description</th></tr></thead><tbody>
<tr class='return'><td>Ret_Val</td><td>DWord</td>
<td>Calculated CRC value (return value of the function).</td></tr>
<tr><td>error</td><td>Bool</td>
<td>TRUE: An error occurred during the execution of the FB</td></tr>
<tr><td>status</td><td>Word</td>
<td>16#0000 - 16#7FFF: Status of the FB, 16#8000 - 16#FFFF: Error identification</td></tr>
</tbody></table>
<h3>In/Out parameter</h3>
<table class='BlockInterface'><thead><tr><th class='name'>Identifier</th><th class='type'>Data type</th>
<th>Description</th></tr></thead><tbody>
<tr><td>array</td><td>Array[*] of Byte</td>
<td>Data stream for which the CRC value will be calculated.</td></tr>
</tbody></table>
<h3>Status & Error codes</h3>
<table class='StatusAndErrorConstants'><thead><tr><th>Code / Value</th><th>Identifier / Description</th></tr></thead><tbody>
<tr><td>16#0000</td><td>STATUS_NO_ERROR<br>No error occurred in function call</td></tr>
<tr><td>16#8400</td><td>ERR_NO_OF_ELEMENTS<br>Error: `noOfElements` exceeds the maximum number of array elements</td></tr>
</tbody></table>
<h2>Functional description</h2>
<p>The function calculates the CRC value from a data stream of any size. The data stream is composed of the individual elements of the array at the input/output parameter <code>array</code>. The start value <code>initValue</code> and the generator polynomial <code>mask</code> can be freely selected.</p>
<p>Via the Boolean input parameters <code>reflectInput</code> and <code>reflectResult</code>, you may optionally mirror the bits of the input data or the CRC value. An XOR operation is also performed with the CRC value at the end and the value <code>finalXorValue</code>.</p>
<p>The input <code>noOfELements</code> can be used to specify the desired number of elements for calculation, it applies:</p>
<p><span class="math inline">NumberOfElements &lt;= (ArrayUpperLimit - ArrayLowerUnderLimit + 1)</span></p>
<hr class='predecessorDefList' />
<dl class='NOTE'>
<dt>Note</dt>
<dd>Various online tools are available for calculating the CRC values. The function of the block was tested with the following online tool, since it supports the input parameters <code>mask</code> (Polynomial) and <code>initValue</code> (Initial Value):</dd>
<dd><a href="http://www.sunshine2k.de/coding/javascript/crc/crc_js.html" target='_blank' >http://www.sunshine2k.de/coding/javascript/crc/crc_js.html</a></dd>
</dl>

<h2>Change log</h2>
<table class='ChangeLog'><thead><tr><th colspan='2'>Version & Date</th><th>Change description</th></tr></thead><tbody>
<tr class='LogEntryStart'><td></td><td>01.00.00</td><td>Siemens Industry Online Support</td></tr>
<tr><td></td><td>03.07.2018</td><td>First released version</td></tr>
<tr class='LogEntryStart'><td></td><td>01.00.01</td><td>Siemens Industry Online Support</td></tr>
<tr><td></td><td>17.08.2018</td><td>Upgrade: TIA V15 Update 2</td></tr>
<tr class='LogEntryStart'><td></td><td>01.00.02</td><td>Siemens Industry Online Support</td></tr>
<tr><td></td><td>23.11.2018</td><td>Upgrade: TIA V15.1</td></tr>
<tr class='LogEntryStart'><td></td><td>01.00.03</td><td>Simatic Systems Support</td></tr>
<tr><td></td><td>09.10.2019</td><td>Code refactoring, comments added</td></tr>
<tr class='LogEntryStart'><td></td><td>03.00.00</td><td>Simatic Systems Support</td></tr>
<tr><td></td><td>23.04.2020</td><td>Set version to V3.0.0, harmonize the version of the whole library</td></tr>
<tr class='LogEntryStart'><td></td><td>03.00.01</td><td>Simatic Systems Support</td></tr>
<tr><td></td><td>12.11.2020</td><td>Insert documentation<br/>Assign default start values to optional inputs - `initValue`, `mask`, `finalXorValue`, `reflectInput`, `reflectResult`</td></tr>
<tr class='LogEntryStart'><td></td><td>03.01.00</td><td>Simatic Systems Support</td></tr>
<tr><td></td><td>14.04.2023</td><td>Add input `noOfElements` to assign length to be converted different from array size<br/>Add outputs `error` and `status` display a wrong assignment to `noOfElements`</td></tr>
</tbody></table>
<hr>
<p class='footer'>
<a href='https://support.industry.siemens.com/cs/ww/en/view/109479728' target='_blank'>Library of General Functions (LGF) for SIMATIC S7-1200 / S7-1500</a><br>
<span>Entry-ID: 109479728</span>
<span>Date: 01/2024</span>
<span>Version: V5.1.1</span>
<span>Generated with TIA Portal Add-In
<a href='https://support.industry.siemens.com/cs/ww/en/view/109809007' target='_blank'>Code2Docu</a>
</span>
</p>
</body></html>
